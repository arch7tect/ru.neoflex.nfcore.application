@GenModel(
    bundleManifest="false",
    modelDirectory="ru.neoflex.nfcore.datasource/src/java/java-gen",
    complianceLevel="7.0",
    rootExtendsClass="org.eclipse.emf.ecore.impl.MinimalEObjectImpl",
    rootExtendsInterface="org.eclipse.emf.ecore.EObject"
)
package ru.neoflex.nfcore.datasource
import ru.neoflex.nfcore.base.types.QName
import ru.neoflex.nfcore.base.types.JSON
import ru.neoflex.nfcore.base.types.Text
import ru.neoflex.nfcore.base.types.Password
import org.eclipse.emf.ecore.EDataType
import org.eclipse.emf.ecore.EStringToStringMapEntry

abstract class Driver {
	QName name
	String[] extLibraries
}

class JdbcDriver extends Driver {
	String driverClassName
	String urlPattern
}

abstract class Datasource {
	QName name
	refers Driver[1] driver
}

class JdbcDatasource extends Datasource {
	String url
	String userName
	Password password
}

abstract class ValueType {
	String name
	refers EDataType dataType
	String caption
	Text description
	String defaultValue
	// TODO: validate domain.dataType == dataType
	refers DatasetColumn domain
}

class DatasetColumn extends ValueType {
	container Dataset dataset opposite columns
}

abstract class Dataset {
	QName name
	contains DatasetColumn[] columns opposite dataset
}

class ColumnValue {
	refers DatasetColumn[1] column
	String value
}

class Row {
	contains ColumnValue[] values
}

class MetadataDataset extends Dataset {
	contains Row[] rows
}

class QueryParameter extends ValueType {
	container QueryDataset dataset opposite parameters
}

class QueryDataset extends Dataset {
	refers Datasource datasource
	String query
	contains QueryParameter[] parameters opposite dataset
	op JSON runQuery(EStringToStringMapEntry[] parameters)
}
